// Code generated by protoc-gen-go.
// source: services.proto
// DO NOT EDIT!

/*
Package goChat is a generated protocol buffer package.

It is generated from these files:
	services.proto

It has these top-level messages:
	Empty
	ChatMessage
	ClientInfo
	GroupInfo
	GroupList
	ClientList
*/
package goChat

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ChatMessage struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChatMessage) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ChatMessage) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *ChatMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ClientInfo struct {
	Sender string `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientInfo) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type GroupInfo struct {
	Client    string `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=groupName" json:"groupName,omitempty"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GroupInfo) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type GroupList struct {
	Groups []string `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *GroupList) Reset()                    { *m = GroupList{} }
func (m *GroupList) String() string            { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()               {}
func (*GroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GroupList) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ClientList struct {
	Clients []string `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (m *ClientList) Reset()                    { *m = ClientList{} }
func (m *ClientList) String() string            { return proto.CompactTextString(m) }
func (*ClientList) ProtoMessage()               {}
func (*ClientList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClientList) GetClients() []string {
	if m != nil {
		return m.Clients
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "goChat.Empty")
	proto.RegisterType((*ChatMessage)(nil), "goChat.ChatMessage")
	proto.RegisterType((*ClientInfo)(nil), "goChat.ClientInfo")
	proto.RegisterType((*GroupInfo)(nil), "goChat.GroupInfo")
	proto.RegisterType((*GroupList)(nil), "goChat.GroupList")
	proto.RegisterType((*ClientList)(nil), "goChat.ClientList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteChatClient, error)
	UnRegister(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error)
	Register(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error)
	CreateGroup(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error)
	JoinGroup(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error)
	GetGroupList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GroupList, error)
	GetGroupClientList(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*ClientList, error)
	GetClientList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientList, error)
	LeaveRoom(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/goChat.Chat/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRouteChatClient{stream}
	return x, nil
}

type Chat_RouteChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatRouteChatClient struct {
	grpc.ClientStream
}

func (x *chatRouteChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRouteChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) UnRegister(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/goChat.Chat/UnRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Register(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/goChat.Chat/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateGroup(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/goChat.Chat/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) JoinGroup(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/goChat.Chat/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetGroupList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := grpc.Invoke(ctx, "/goChat.Chat/GetGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetGroupClientList(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*ClientList, error) {
	out := new(ClientList)
	err := grpc.Invoke(ctx, "/goChat.Chat/GetGroupClientList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetClientList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientList, error) {
	out := new(ClientList)
	err := grpc.Invoke(ctx, "/goChat.Chat/GetClientList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) LeaveRoom(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/goChat.Chat/LeaveRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	RouteChat(Chat_RouteChatServer) error
	UnRegister(context.Context, *ClientInfo) (*Empty, error)
	Register(context.Context, *ClientInfo) (*Empty, error)
	CreateGroup(context.Context, *GroupInfo) (*Empty, error)
	JoinGroup(context.Context, *GroupInfo) (*Empty, error)
	GetGroupList(context.Context, *Empty) (*GroupList, error)
	GetGroupClientList(context.Context, *GroupInfo) (*ClientList, error)
	GetClientList(context.Context, *Empty) (*ClientList, error)
	LeaveRoom(context.Context, *GroupInfo) (*Empty, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).RouteChat(&chatRouteChatServer{stream})
}

type Chat_RouteChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatRouteChatServer struct {
	grpc.ServerStream
}

func (x *chatRouteChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRouteChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_UnRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/UnRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UnRegister(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Register(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateGroup(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).JoinGroup(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetGroupList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetGroupClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetGroupClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/GetGroupClientList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetGroupClientList(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/GetClientList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetClientList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LeaveRoom(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goChat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnRegister",
			Handler:    _Chat_UnRegister_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Chat_Register_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Chat_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Chat_JoinGroup_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _Chat_GetGroupList_Handler,
		},
		{
			MethodName: "GetGroupClientList",
			Handler:    _Chat_GetGroupClientList_Handler,
		},
		{
			MethodName: "GetClientList",
			Handler:    _Chat_GetClientList_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _Chat_LeaveRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _Chat_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

func init() { proto.RegisterFile("services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x4b, 0xf3, 0x40,
	0x10, 0x6e, 0xde, 0xbe, 0xb6, 0xcd, 0xd4, 0x0a, 0x8e, 0x20, 0x21, 0x78, 0x28, 0xab, 0x48, 0x4f,
	0xad, 0xad, 0xde, 0xc4, 0x83, 0x14, 0x29, 0x4a, 0xf5, 0x10, 0xf0, 0xe4, 0x29, 0xd6, 0x31, 0x06,
	0x4c, 0xb6, 0xec, 0x6e, 0x0b, 0xfe, 0x60, 0xff, 0x87, 0xec, 0x6e, 0x36, 0xfd, 0x20, 0x42, 0x3d,
	0x3e, 0xf3, 0x7c, 0xcc, 0xce, 0x13, 0x02, 0x07, 0x92, 0xc4, 0x32, 0x9d, 0x91, 0xec, 0xcf, 0x05,
	0x57, 0x1c, 0x1b, 0x09, 0x1f, 0x7f, 0xc4, 0x8a, 0x35, 0x61, 0xef, 0x2e, 0x9b, 0xab, 0x2f, 0xf6,
	0x02, 0x6d, 0x3d, 0x78, 0x24, 0x29, 0xe3, 0x84, 0xf0, 0x18, 0x1a, 0x92, 0xf2, 0x37, 0x12, 0x81,
	0xd7, 0xf5, 0x7a, 0x7e, 0x54, 0x20, 0x0c, 0xa1, 0x25, 0x68, 0x46, 0xe9, 0x92, 0x44, 0xf0, 0xcf,
	0x30, 0x25, 0xc6, 0x00, 0x9a, 0x99, 0xb5, 0x07, 0x75, 0x43, 0x39, 0xc8, 0xce, 0x00, 0xc6, 0x9f,
	0x29, 0xe5, 0xea, 0x3e, 0x7f, 0xe7, 0xbf, 0x65, 0xb3, 0x5b, 0xf0, 0x27, 0x82, 0x2f, 0xe6, 0x4e,
	0x34, 0x33, 0x16, 0x27, 0xb2, 0x08, 0x4f, 0xc0, 0x4f, 0xb4, 0xe8, 0x29, 0xce, 0xa8, 0x78, 0xc1,
	0x6a, 0xc0, 0x4e, 0x8b, 0x88, 0x69, 0x2a, 0x95, 0x8e, 0x30, 0x8c, 0x0c, 0xbc, 0x6e, 0x5d, 0x47,
	0x58, 0xc4, 0xce, 0xdd, 0x6b, 0x8c, 0x2a, 0x80, 0xa6, 0x8d, 0x76, 0x32, 0x07, 0x47, 0xdf, 0x75,
	0xf8, 0xaf, 0x3b, 0xc1, 0x6b, 0xf0, 0x23, 0xbe, 0x50, 0x64, 0xc0, 0x51, 0xdf, 0x56, 0xd7, 0x5f,
	0xab, 0x2b, 0xac, 0x1a, 0xb2, 0x5a, 0xcf, 0xbb, 0xf0, 0x70, 0x08, 0xf0, 0x9c, 0x47, 0x94, 0xa4,
	0x52, 0x91, 0x40, 0x2c, 0x85, 0x65, 0x1f, 0x61, 0xc7, 0xcd, 0xec, 0x97, 0xa8, 0xe1, 0x00, 0x5a,
	0x7f, 0x33, 0x0c, 0xa1, 0x3d, 0x16, 0x14, 0x2b, 0x32, 0xc7, 0xe3, 0xa1, 0xe3, 0xcb, 0x3a, 0xab,
	0x76, 0xf8, 0x0f, 0x3c, 0xcd, 0x77, 0x37, 0x8c, 0x60, 0x7f, 0x42, 0x6a, 0xd5, 0xee, 0xa6, 0x20,
	0xdc, 0x8c, 0xd0, 0x0a, 0x56, 0xc3, 0x1b, 0x40, 0xe7, 0x59, 0x6b, 0xbc, 0x62, 0xdb, 0xd6, 0x95,
	0x85, 0xfd, 0x0a, 0x3a, 0x13, 0x52, 0x6b, 0xce, 0xad, 0x9d, 0xd5, 0xae, 0x01, 0xf8, 0x53, 0x8a,
	0x97, 0x14, 0x71, 0x9e, 0xed, 0x72, 0xd9, 0x6b, 0xc3, 0xfc, 0x12, 0x97, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x15, 0x0b, 0xaa, 0x80, 0x24, 0x03, 0x00, 0x00,
}
